import { ChangeDetectorRef, ElementRef, EventEmitter, Injector, NgZone } from '@angular/core';
import { ValueAccessor } from '@ionic/angular/common';
import type { DatetimeChangeEventDetail, Components } from '@ionic/core/components';
import * as i0 from "@angular/core";
export declare class IonDatetime extends ValueAccessor {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone, injector: Injector);
    handleIonChange(el: HTMLIonDatetimeElement): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IonDatetime, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IonDatetime, "ion-datetime", never, { "cancelText": { "alias": "cancelText"; "required": false; }; "clearText": { "alias": "clearText"; "required": false; }; "color": { "alias": "color"; "required": false; }; "dayValues": { "alias": "dayValues"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "doneText": { "alias": "doneText"; "required": false; }; "firstDayOfWeek": { "alias": "firstDayOfWeek"; "required": false; }; "formatOptions": { "alias": "formatOptions"; "required": false; }; "highlightedDates": { "alias": "highlightedDates"; "required": false; }; "hourCycle": { "alias": "hourCycle"; "required": false; }; "hourValues": { "alias": "hourValues"; "required": false; }; "isDateEnabled": { "alias": "isDateEnabled"; "required": false; }; "locale": { "alias": "locale"; "required": false; }; "max": { "alias": "max"; "required": false; }; "min": { "alias": "min"; "required": false; }; "minuteValues": { "alias": "minuteValues"; "required": false; }; "mode": { "alias": "mode"; "required": false; }; "monthValues": { "alias": "monthValues"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "name": { "alias": "name"; "required": false; }; "preferWheel": { "alias": "preferWheel"; "required": false; }; "presentation": { "alias": "presentation"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "showClearButton": { "alias": "showClearButton"; "required": false; }; "showDefaultButtons": { "alias": "showDefaultButtons"; "required": false; }; "showDefaultTimeLabel": { "alias": "showDefaultTimeLabel"; "required": false; }; "showDefaultTitle": { "alias": "showDefaultTitle"; "required": false; }; "size": { "alias": "size"; "required": false; }; "titleSelectedDatesFormatter": { "alias": "titleSelectedDatesFormatter"; "required": false; }; "value": { "alias": "value"; "required": false; }; "yearValues": { "alias": "yearValues"; "required": false; }; }, {}, never, ["*"], true, never>;
}
export declare interface IonDatetime extends Components.IonDatetime {
    /**
     * Emitted when the datetime selection was cancelled.
     */
    ionCancel: EventEmitter<CustomEvent<void>>;
    /**
     * Emitted when the value (selected date) has changed.
     */
    ionChange: EventEmitter<CustomEvent<DatetimeChangeEventDetail>>;
    /**
     * Emitted when the datetime has focus.
     */
    ionFocus: EventEmitter<CustomEvent<void>>;
    /**
     * Emitted when the datetime loses focus.
     */
    ionBlur: EventEmitter<CustomEvent<void>>;
}
